workflows:
  # PR 검증 워크플로우 (CI 전용)
  ci-workflow:
    name: CI - PR Validation
    max_build_duration: 60
    instance_type: mac_mini_m2
    
    environment:
      flutter: stable

    cache:
      cache_paths:
        - $HOME/.pub-cache
        - $HOME/.gradle/caches
        - $HOME/.gradle/wrapper
        - $HOME/Library/Caches/CocoaPods
        - $HOME/Library/Android/sdk

    triggering:
      events:
        - pull_request
      branch_patterns:
        - pattern: develop
          include: true
          source: false
        - pattern: main
          include: true
          source: false
      cancel_previous_builds: true

    scripts:
      - name: Create temporary .env file for CI
        script: |
          echo "NAVER_MAP_CLIENT_ID=dummy_client_id_for_ci" > .env
          
      - name: Get Flutter dependencies
        script: |
          flutter pub get

      - name: Generate code with build_runner
        script: |
          dart run build_runner build --delete-conflicting-outputs

      - name: Install FlutterFire CLI (and Firebase CLI)
        script: |
          # Firebase CLI (토큰 인증 필요 시)
          npm i -g firebase-tools
          # FlutterFire CLI
          dart pub global activate flutterfire_cli
          echo 'export PATH="$PATH:$HOME/.pub-cache/bin"' >> $CM_ENV
      - name: Generate firebase_options.dart (non-interactive)
        script: |
          set -e
          # 포크 PR 등으로 FIREBASE_TOKEN이 없으면 더미 파일로 우회
          if [ -z "${FIREBASE_TOKEN:-}" ] || [ -z "${FIREBASE_PROJECT_ID:-}" ]; then
            echo "[WARN] FIREBASE_TOKEN 또는 FIREBASE_PROJECT_ID가 없어 더미 firebase_options.dart를 생성합니다."
            mkdir -p lib
            cat > lib/firebase_options.dart <<'DUMMY'
            // Auto-generated dummy for CI analyze
            class DefaultFirebaseOptions {
              static const currentPlatform = null;
            }
            DUMMY
          else
            # 플랫폼 감지 자동 시도 + 실패 대비 플래그 전달
            PLATFORMS="android,ios"
            EXTRA_FLAGS=""
            if [ -n "${ANDROID_PACKAGE_NAME:-}" ]; then
              EXTRA_FLAGS="$EXTRA_FLAGS --android-package-name=$ANDROID_PACKAGE_NAME"
            fi
            if [ -n "${IOS_BUNDLE_ID:-}" ]; then
              EXTRA_FLAGS="$EXTRA_FLAGS --ios-bundle-id=$IOS_BUNDLE_ID"
            fi
            # 실제 생성
            flutterfire configure \
              --project="$FIREBASE_PROJECT_ID" \
              --platforms="$PLATFORMS" \
              --out="lib/firebase_options.dart" \
              --yes $EXTRA_FLAGS
          fi
        environment:
          FIREBASE_TOKEN: $FIREBASE_TOKEN
          
      - name: Flutter analyze
        script: |
          flutter analyze

      - name: Run unit tests
        script: |
          flutter test
          
      # - name: Build Android debug APK (optional)
      #   script: |
      #     flutter build apk --debug
      #   ignore_failure: true
          
    artifacts:
      - build/**/outputs/**/*.apk
      - flutter_drive.log

# CD파이프라인은 추후 추가
