workflows:
  # PR 검증 워크플로우 (CI 전용)
  ci-workflow:
    name: CI - PR Validation
    max_build_duration: 60
    instance_type: mac_mini_m2

    environment:
      flutter: stable
      groups:
        - appstore_credentials

    cache:
      cache_paths:
        - $HOME/.pub-cache
        - $HOME/.gradle/caches
        - $HOME/.gradle/wrapper
        - $HOME/Library/Caches/CocoaPods
        - $HOME/Library/Android/sdk

    triggering:
      events:
        - pull_request
      branch_patterns:
        - pattern: develop
          include: true
          source: false
        - pattern: main
          include: true
          source: false
      cancel_previous_builds: true

    scripts:
      - name: Create temporary .env file for CI
        script: |
          echo "NAVER_MAP_CLIENT_ID=dummy_client_id_for_ci" > .env

      - name: Get Flutter dependencies
        script: flutter pub get

      - name: Generate code with build_runner
        script: dart run build_runner build --delete-conflicting-outputs

      - name: Install FlutterFire CLI (and Firebase CLI)
        script: |
          set -euo pipefail
          dart pub global activate flutterfire_cli
          # flutterfire PATH 등록 (이후 스텝에 유지)
          echo 'export PATH="$PATH:$HOME/.pub-cache/bin"' >> $CM_ENV

      - name: Generate firebase_options.dart (fail hard, no dummy)
        script: |
          set -euo pipefail

          # 필수 ENV 확인 (Codemagic UI 또는 Env Group에 등록 필요)
          missing=()
          [ -z "${FIREBASE_TOKEN:-}" ] && missing+=("FIREBASE_TOKEN")
          [ -z "${FIREBASE_PROJECT_ID:-}" ] && missing+=("FIREBASE_PROJECT_ID")
          [ -z "${ANDROID_PACKAGE_NAME:-}" ] && missing+=("ANDROID_PACKAGE_NAME")
          [ -z "${IOS_BUNDLE_ID:-}" ] && missing+=("IOS_BUNDLE_ID")
          if [ ${#missing[@]} -ne 0 ]; then
            echo "ERROR: Missing envs: ${missing[*]}" >&2
            exit 1
          fi

          # 비대화형 생성
          flutterfire configure \
            --project="$FIREBASE_PROJECT_ID" \
            --platforms=android,ios \
            --android-package-name="$ANDROID_PACKAGE_NAME" \
            --ios-bundle-id="$IOS_BUNDLE_ID" \
            --out="lib/firebase_options.dart" \
            --yes

          # 산출물 검증
          test -f lib/firebase_options.dart || { echo "ERROR: firebase_options.dart not created"; exit 1; }
          grep -q "class DefaultFirebaseOptions" lib/firebase_options.dart || { echo "ERROR: invalid firebase_options.dart"; exit 1; }

      - name: Flutter analyze
        script: flutter analyze

      - name: Run unit tests
        script: flutter test

      # - name: Build Android debug APK (optional)
      #   script: flutter build apk --debug
      #   ignore_failure: true

    artifacts:
      - build/**/outputs/**/*.apk
      - flutter_drive.log

# CD파이프라인은 추후 추가